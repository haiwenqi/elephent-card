一、定义：
 var rx = //  (简写)
 var rx = new RegExp();

二2、修饰符：

 g:全局搜索
 i:不区分大小写

三、符号说明：

 \d  数字、\D 非数字
 
 \w 字符（字母、数字、下划线_）、\W 非数字

 \s 空格、\S非空格

 \b 字符边界 独立部分（起始、结束、空格）、\D 非独立部分

 [] 一组相似的元素，中括号内整体代表一个字符，或的关系

 [a-z] a到z小写字母、[a-z A-Z] a到z 大写或小写 、[a-z A-Z 0-9]....很多

 ^ 在中括号[] 内表示“排除”。在正则开始位置代表“以xx开始”

 $在正则结束位置代表“以xx结束”

 | 或的关系

 . 除换行符 \n 之外的任何单字符  \. 才代表真正的点

 ()一组小括号代表一组子项  注：match()方法中不加g才能获取到子项的集合
 
 \1 重复的第一个子项、\2 重复的第二个子项 eg:/\w\w/ != /(\w)\1/ str="de" 符合第一个，不符合第二个。第二个必须是两个一样的字符(dd才行)
 
 {n,m} 至少出现n次，至多出现m次

 {n} 正好n次
 
 {1,} === +  至少出现一次
 
 {0，}=== *  至少出现0次
 
 {0,1}===？ 0次或1次


四、方法：test()、search()、match()、replace()

1、test()：

写法：正则.test(字符串)

字符串符合正则返回true、否则返回false

2、search():
 
写法：字符串.search(正则)

返回出现的位置

3、match():

写法：字符串.match(正则)

返回 符合正则的数组，若字符串没有一项符合正则返回null

注：在match()方法中不加结尾符 g 才能获取到子项(小括号)中的集合

4、replace():

写法: 字符串.replace(正则,要替换的)

字符串.replace(正则,function($0,$1,$2...){return xxx})

查找出符合正则的集合用二参代替。二参可为字符串也可为回调函数

其中回调函数中一参代表所有匹配的集合，二参代表第一个子项中匹配的集合....


五、其他说明：

1、正则要传参的话 定义要用new RegExp("正则"，"结尾符g或i")

2、双重转义

 简写模式 一个斜杠\ 代表转义，正规模式中一参必须为字符串模式所以所有转义需要两道杠\\

/\w/==="\\w"




 
 
 
 
